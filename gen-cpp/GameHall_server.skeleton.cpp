// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "GameHall.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::zgobandRPC;

class GameHallHandler : virtual public GameHallIf {
 public:
  GameHallHandler() {
    // Your initialization goes here
  }

  bool sitDown(const std::string& account, const int32_t deskID, const int32_t seat) {
    // Your implementation goes here
    printf("sitDown\n");
  }

  void getSeatInfo(PlayerInfo& _return, const int32_t deskID, const int32_t seatID) {
    // Your implementation goes here
    printf("getSeatInfo\n");
  }

  void setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady) {
    // Your implementation goes here
    printf("setReady\n");
  }

  int32_t leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID) {
    // Your implementation goes here
    printf("leaveSeat\n");
  }

  void autoMatch(std::map<std::string, int32_t> & _return, const std::string& account) {
    // Your implementation goes here
    printf("autoMatch\n");
  }

  void getSavedGame(std::string& _return, const int32_t id) {
    // Your implementation goes here
    printf("getSavedGame\n");
  }

  void getSavedGameList(std::vector<std::string> & _return, const std::string& account) {
    // Your implementation goes here
    printf("getSavedGameList\n");
  }

  void getDeskList(std::vector<Desk> & _return) {
    // Your implementation goes here
    printf("getDeskList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<GameHallHandler> handler(new GameHallHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new GameHallProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

