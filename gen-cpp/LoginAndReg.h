/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LoginAndReg_H
#define LoginAndReg_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "zgobandServerThrift_types.h"

namespace zgobandRPC {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LoginAndRegIf {
 public:
  virtual ~LoginAndRegIf() {}
  virtual void login(PlayerInfo& _return, const std::string& account, const std::string& password) = 0;
  virtual bool reg(const std::string& account, const std::string& password, const std::string& nickname) = 0;
};

class LoginAndRegIfFactory {
 public:
  typedef LoginAndRegIf Handler;

  virtual ~LoginAndRegIfFactory() {}

  virtual LoginAndRegIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LoginAndRegIf* /* handler */) = 0;
};

class LoginAndRegIfSingletonFactory : virtual public LoginAndRegIfFactory {
 public:
  LoginAndRegIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<LoginAndRegIf>& iface) : iface_(iface) {}
  virtual ~LoginAndRegIfSingletonFactory() {}

  virtual LoginAndRegIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LoginAndRegIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> iface_;
};

class LoginAndRegNull : virtual public LoginAndRegIf {
 public:
  virtual ~LoginAndRegNull() {}
  void login(PlayerInfo& /* _return */, const std::string& /* account */, const std::string& /* password */) {
    return;
  }
  bool reg(const std::string& /* account */, const std::string& /* password */, const std::string& /* nickname */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _LoginAndReg_login_args__isset {
  _LoginAndReg_login_args__isset() : account(false), password(false) {}
  bool account :1;
  bool password :1;
} _LoginAndReg_login_args__isset;

class LoginAndReg_login_args {
 public:

  LoginAndReg_login_args(const LoginAndReg_login_args&);
  LoginAndReg_login_args& operator=(const LoginAndReg_login_args&);
  LoginAndReg_login_args() : account(), password() {
  }

  virtual ~LoginAndReg_login_args() throw();
  std::string account;
  std::string password;

  _LoginAndReg_login_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const LoginAndReg_login_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const LoginAndReg_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginAndReg_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginAndReg_login_pargs {
 public:


  virtual ~LoginAndReg_login_pargs() throw();
  const std::string* account;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginAndReg_login_result__isset {
  _LoginAndReg_login_result__isset() : success(false) {}
  bool success :1;
} _LoginAndReg_login_result__isset;

class LoginAndReg_login_result {
 public:

  LoginAndReg_login_result(const LoginAndReg_login_result&);
  LoginAndReg_login_result& operator=(const LoginAndReg_login_result&);
  LoginAndReg_login_result() {
  }

  virtual ~LoginAndReg_login_result() throw();
  PlayerInfo success;

  _LoginAndReg_login_result__isset __isset;

  void __set_success(const PlayerInfo& val);

  bool operator == (const LoginAndReg_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LoginAndReg_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginAndReg_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginAndReg_login_presult__isset {
  _LoginAndReg_login_presult__isset() : success(false) {}
  bool success :1;
} _LoginAndReg_login_presult__isset;

class LoginAndReg_login_presult {
 public:


  virtual ~LoginAndReg_login_presult() throw();
  PlayerInfo* success;

  _LoginAndReg_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LoginAndReg_reg_args__isset {
  _LoginAndReg_reg_args__isset() : account(false), password(false), nickname(false) {}
  bool account :1;
  bool password :1;
  bool nickname :1;
} _LoginAndReg_reg_args__isset;

class LoginAndReg_reg_args {
 public:

  LoginAndReg_reg_args(const LoginAndReg_reg_args&);
  LoginAndReg_reg_args& operator=(const LoginAndReg_reg_args&);
  LoginAndReg_reg_args() : account(), password(), nickname() {
  }

  virtual ~LoginAndReg_reg_args() throw();
  std::string account;
  std::string password;
  std::string nickname;

  _LoginAndReg_reg_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_password(const std::string& val);

  void __set_nickname(const std::string& val);

  bool operator == (const LoginAndReg_reg_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    return true;
  }
  bool operator != (const LoginAndReg_reg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginAndReg_reg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LoginAndReg_reg_pargs {
 public:


  virtual ~LoginAndReg_reg_pargs() throw();
  const std::string* account;
  const std::string* password;
  const std::string* nickname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginAndReg_reg_result__isset {
  _LoginAndReg_reg_result__isset() : success(false) {}
  bool success :1;
} _LoginAndReg_reg_result__isset;

class LoginAndReg_reg_result {
 public:

  LoginAndReg_reg_result(const LoginAndReg_reg_result&);
  LoginAndReg_reg_result& operator=(const LoginAndReg_reg_result&);
  LoginAndReg_reg_result() : success(0) {
  }

  virtual ~LoginAndReg_reg_result() throw();
  bool success;

  _LoginAndReg_reg_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const LoginAndReg_reg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LoginAndReg_reg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginAndReg_reg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoginAndReg_reg_presult__isset {
  _LoginAndReg_reg_presult__isset() : success(false) {}
  bool success :1;
} _LoginAndReg_reg_presult__isset;

class LoginAndReg_reg_presult {
 public:


  virtual ~LoginAndReg_reg_presult() throw();
  bool* success;

  _LoginAndReg_reg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LoginAndRegClient : virtual public LoginAndRegIf {
 public:
  LoginAndRegClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoginAndRegClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(PlayerInfo& _return, const std::string& account, const std::string& password);
  void send_login(const std::string& account, const std::string& password);
  void recv_login(PlayerInfo& _return);
  bool reg(const std::string& account, const std::string& password, const std::string& nickname);
  void send_reg(const std::string& account, const std::string& password, const std::string& nickname);
  bool recv_reg();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LoginAndRegProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LoginAndRegProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LoginAndRegProcessor(::apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> iface) :
    iface_(iface) {
    processMap_["login"] = &LoginAndRegProcessor::process_login;
    processMap_["reg"] = &LoginAndRegProcessor::process_reg;
  }

  virtual ~LoginAndRegProcessor() {}
};

class LoginAndRegProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LoginAndRegProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< LoginAndRegIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< LoginAndRegIfFactory > handlerFactory_;
};

class LoginAndRegMultiface : virtual public LoginAndRegIf {
 public:
  LoginAndRegMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LoginAndRegMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> > ifaces_;
  LoginAndRegMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<LoginAndRegIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(PlayerInfo& _return, const std::string& account, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(_return, account, password);
    }
    ifaces_[i]->login(_return, account, password);
    return;
  }

  bool reg(const std::string& account, const std::string& password, const std::string& nickname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reg(account, password, nickname);
    }
    return ifaces_[i]->reg(account, password, nickname);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LoginAndRegConcurrentClient : virtual public LoginAndRegIf {
 public:
  LoginAndRegConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoginAndRegConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(PlayerInfo& _return, const std::string& account, const std::string& password);
  int32_t send_login(const std::string& account, const std::string& password);
  void recv_login(PlayerInfo& _return, const int32_t seqid);
  bool reg(const std::string& account, const std::string& password, const std::string& nickname);
  int32_t send_reg(const std::string& account, const std::string& password, const std::string& nickname);
  bool recv_reg(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
