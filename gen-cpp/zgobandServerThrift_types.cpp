/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "zgobandServerThrift_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace zgobandRPC {


PlayerInfo::~PlayerInfo() throw() {
}


void PlayerInfo::__set_account(const std::string& val) {
  this->account = val;
}

void PlayerInfo::__set_nickname(const std::string& val) {
  this->nickname = val;
}

void PlayerInfo::__set_core(const int32_t val) {
  this->core = val;
}

void PlayerInfo::__set_winRound(const int32_t val) {
  this->winRound = val;
}

void PlayerInfo::__set_loseRound(const int32_t val) {
  this->loseRound = val;
}

void PlayerInfo::__set_drawRound(const int32_t val) {
  this->drawRound = val;
}

void PlayerInfo::__set_escapeRound(const int32_t val) {
  this->escapeRound = val;
}

void PlayerInfo::__set_isReady(const bool val) {
  this->isReady = val;
__isset.isReady = true;
}
std::ostream& operator<<(std::ostream& out, const PlayerInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlayerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->account);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->core);
          this->__isset.core = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->winRound);
          this->__isset.winRound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->loseRound);
          this->__isset.loseRound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->drawRound);
          this->__isset.drawRound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->escapeRound);
          this->__isset.escapeRound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isReady);
          this->__isset.isReady = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlayerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlayerInfo");

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->account);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("core", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->core);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("winRound", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->winRound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loseRound", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->loseRound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drawRound", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->drawRound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("escapeRound", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->escapeRound);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isReady) {
    xfer += oprot->writeFieldBegin("isReady", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->isReady);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlayerInfo &a, PlayerInfo &b) {
  using ::std::swap;
  swap(a.account, b.account);
  swap(a.nickname, b.nickname);
  swap(a.core, b.core);
  swap(a.winRound, b.winRound);
  swap(a.loseRound, b.loseRound);
  swap(a.drawRound, b.drawRound);
  swap(a.escapeRound, b.escapeRound);
  swap(a.isReady, b.isReady);
  swap(a.__isset, b.__isset);
}

PlayerInfo::PlayerInfo(const PlayerInfo& other0) {
  account = other0.account;
  nickname = other0.nickname;
  core = other0.core;
  winRound = other0.winRound;
  loseRound = other0.loseRound;
  drawRound = other0.drawRound;
  escapeRound = other0.escapeRound;
  isReady = other0.isReady;
  __isset = other0.__isset;
}
PlayerInfo& PlayerInfo::operator=(const PlayerInfo& other1) {
  account = other1.account;
  nickname = other1.nickname;
  core = other1.core;
  winRound = other1.winRound;
  loseRound = other1.loseRound;
  drawRound = other1.drawRound;
  escapeRound = other1.escapeRound;
  isReady = other1.isReady;
  __isset = other1.__isset;
  return *this;
}
void PlayerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlayerInfo(";
  out << "account=" << to_string(account);
  out << ", " << "nickname=" << to_string(nickname);
  out << ", " << "core=" << to_string(core);
  out << ", " << "winRound=" << to_string(winRound);
  out << ", " << "loseRound=" << to_string(loseRound);
  out << ", " << "drawRound=" << to_string(drawRound);
  out << ", " << "escapeRound=" << to_string(escapeRound);
  out << ", " << "isReady="; (__isset.isReady ? (out << to_string(isReady)) : (out << "<null>"));
  out << ")";
}


Desk::~Desk() throw() {
}


void Desk::__set_deskID(const int32_t val) {
  this->deskID = val;
}

void Desk::__set_player1(const std::string& val) {
  this->player1 = val;
}

void Desk::__set_player2(const std::string& val) {
  this->player2 = val;
}

void Desk::__set_ready1(const bool val) {
  this->ready1 = val;
}

void Desk::__set_ready2(const bool val) {
  this->ready2 = val;
}
std::ostream& operator<<(std::ostream& out, const Desk& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Desk::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deskID);
          this->__isset.deskID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->player1);
          this->__isset.player1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->player2);
          this->__isset.player2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready1);
          this->__isset.ready1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ready2);
          this->__isset.ready2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Desk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Desk");

  xfer += oprot->writeFieldBegin("deskID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->deskID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player1", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->player1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("player2", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->player2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ready1", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ready1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ready2", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->ready2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Desk &a, Desk &b) {
  using ::std::swap;
  swap(a.deskID, b.deskID);
  swap(a.player1, b.player1);
  swap(a.player2, b.player2);
  swap(a.ready1, b.ready1);
  swap(a.ready2, b.ready2);
  swap(a.__isset, b.__isset);
}

Desk::Desk(const Desk& other2) {
  deskID = other2.deskID;
  player1 = other2.player1;
  player2 = other2.player2;
  ready1 = other2.ready1;
  ready2 = other2.ready2;
  __isset = other2.__isset;
}
Desk& Desk::operator=(const Desk& other3) {
  deskID = other3.deskID;
  player1 = other3.player1;
  player2 = other3.player2;
  ready1 = other3.ready1;
  ready2 = other3.ready2;
  __isset = other3.__isset;
  return *this;
}
void Desk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Desk(";
  out << "deskID=" << to_string(deskID);
  out << ", " << "player1=" << to_string(player1);
  out << ", " << "player2=" << to_string(player2);
  out << ", " << "ready1=" << to_string(ready1);
  out << ", " << "ready2=" << to_string(ready2);
  out << ")";
}


InvalidOperation::~InvalidOperation() throw() {
}


void InvalidOperation::__set_type(const std::string& val) {
  this->type = val;
}

void InvalidOperation::__set_why(const std::string& val) {
  this->why = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

InvalidOperation::InvalidOperation(const InvalidOperation& other4) : TException() {
  type = other4.type;
  why = other4.why;
  __isset = other4.__isset;
}
InvalidOperation& InvalidOperation::operator=(const InvalidOperation& other5) {
  type = other5.type;
  why = other5.why;
  __isset = other5.__isset;
  return *this;
}
void InvalidOperation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidOperation(";
  out << "type=" << to_string(type);
  out << ", " << "why=" << to_string(why);
  out << ")";
}

const char* InvalidOperation::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidOperation";
  }
}

} // namespace
