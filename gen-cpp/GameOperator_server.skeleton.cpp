// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "GameOperator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::zgobandRPC;

class GameOperatorHandler : virtual public GameOperatorIf {
 public:
  GameOperatorHandler() {
    // Your initialization goes here
  }

  int8_t putChess(const std::string& player1, const std::string& player2, const int32_t deskID, const int8_t seatID, const int8_t row, const int8_t column) {
    // Your implementation goes here
    printf("putChess\n");
  }

  bool takeBackReq(const std::string& account, const std::string& otherSide, const int8_t seatID) {
    // Your implementation goes here
    printf("takeBackReq\n");
  }

  bool takeBackRespond(const std::string& player1, const std::string& player2, const int8_t seatID, const bool resp) {
    // Your implementation goes here
    printf("takeBackRespond\n");
  }

  void loseReq(const std::string& player1, const std::string& player2, const int32_t deskID, const int8_t seatID) {
    // Your implementation goes here
    printf("loseReq\n");
  }

  void drawReq(const std::string& account, const std::string& otherSide, const int8_t seatID) {
    // Your implementation goes here
    printf("drawReq\n");
  }

  void drawResponse(const std::string& player1, const std::string& player2, const int32_t deskID, const int8_t seatID, const bool resp) {
    // Your implementation goes here
    printf("drawResponse\n");
  }

  void sendChatText(const std::string& toAccount, const std::string& account, const std::string& text) {
    // Your implementation goes here
    printf("sendChatText\n");
  }

  int8_t saveLastGame(const std::string& account, const int8_t seatID, const std::string& gameName) {
    // Your implementation goes here
    printf("saveLastGame\n");
  }

  void getPlayerInfo(PlayerInfo& _return, const std::string& account) {
    // Your implementation goes here
    printf("getPlayerInfo\n");
  }

  bool savePlayerInfo(const PlayerInfo& playerInfo) {
    // Your implementation goes here
    printf("savePlayerInfo\n");
  }

  void blockAccount(const std::string& account) {
    // Your implementation goes here
    printf("blockAccount\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<GameOperatorHandler> handler(new GameOperatorHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new GameOperatorProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

