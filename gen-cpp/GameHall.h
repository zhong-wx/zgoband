/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameHall_H
#define GameHall_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "zgobandServerThrift_types.h"

namespace zgobandRPC {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GameHallIf {
 public:
  virtual ~GameHallIf() {}
  virtual bool sitDown(const std::string& account, const int32_t deskID, const int32_t seat) = 0;
  virtual void getSeatInfo(PlayerInfo& _return, const int32_t deskID, const int32_t seatID) = 0;
  virtual void setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady) = 0;
  virtual int32_t leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID) = 0;
  virtual void autoMatch(std::map<std::string, int32_t> & _return, const std::string& account) = 0;
  virtual void getDeskList(std::vector<Desk> & _return) = 0;
  virtual void getSavedGame(std::string& _return, const int32_t id) = 0;
  virtual void getSavedGameList(std::vector<std::string> & _return, const std::string& account) = 0;
  virtual void delSavedGame(const int32_t id) = 0;
};

class GameHallIfFactory {
 public:
  typedef GameHallIf Handler;

  virtual ~GameHallIfFactory() {}

  virtual GameHallIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameHallIf* /* handler */) = 0;
};

class GameHallIfSingletonFactory : virtual public GameHallIfFactory {
 public:
  GameHallIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<GameHallIf>& iface) : iface_(iface) {}
  virtual ~GameHallIfSingletonFactory() {}

  virtual GameHallIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameHallIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<GameHallIf> iface_;
};

class GameHallNull : virtual public GameHallIf {
 public:
  virtual ~GameHallNull() {}
  bool sitDown(const std::string& /* account */, const int32_t /* deskID */, const int32_t /* seat */) {
    bool _return = false;
    return _return;
  }
  void getSeatInfo(PlayerInfo& /* _return */, const int32_t /* deskID */, const int32_t /* seatID */) {
    return;
  }
  void setReady(const std::string& /* account */, const int32_t /* deskID */, const int32_t /* seatID */, const bool /* isReady */) {
    return;
  }
  int32_t leaveSeat(const std::string& /* account */, const int32_t /* deskID */, const int32_t /* seatID */) {
    int32_t _return = 0;
    return _return;
  }
  void autoMatch(std::map<std::string, int32_t> & /* _return */, const std::string& /* account */) {
    return;
  }
  void getDeskList(std::vector<Desk> & /* _return */) {
    return;
  }
  void getSavedGame(std::string& /* _return */, const int32_t /* id */) {
    return;
  }
  void getSavedGameList(std::vector<std::string> & /* _return */, const std::string& /* account */) {
    return;
  }
  void delSavedGame(const int32_t /* id */) {
    return;
  }
};

typedef struct _GameHall_sitDown_args__isset {
  _GameHall_sitDown_args__isset() : account(false), deskID(false), seat(false) {}
  bool account :1;
  bool deskID :1;
  bool seat :1;
} _GameHall_sitDown_args__isset;

class GameHall_sitDown_args {
 public:

  GameHall_sitDown_args(const GameHall_sitDown_args&);
  GameHall_sitDown_args& operator=(const GameHall_sitDown_args&);
  GameHall_sitDown_args() : account(), deskID(0), seat(0) {
  }

  virtual ~GameHall_sitDown_args() throw();
  std::string account;
  int32_t deskID;
  int32_t seat;

  _GameHall_sitDown_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_deskID(const int32_t val);

  void __set_seat(const int32_t val);

  bool operator == (const GameHall_sitDown_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(deskID == rhs.deskID))
      return false;
    if (!(seat == rhs.seat))
      return false;
    return true;
  }
  bool operator != (const GameHall_sitDown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_sitDown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_sitDown_pargs {
 public:


  virtual ~GameHall_sitDown_pargs() throw();
  const std::string* account;
  const int32_t* deskID;
  const int32_t* seat;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_sitDown_result__isset {
  _GameHall_sitDown_result__isset() : success(false) {}
  bool success :1;
} _GameHall_sitDown_result__isset;

class GameHall_sitDown_result {
 public:

  GameHall_sitDown_result(const GameHall_sitDown_result&);
  GameHall_sitDown_result& operator=(const GameHall_sitDown_result&);
  GameHall_sitDown_result() : success(0) {
  }

  virtual ~GameHall_sitDown_result() throw();
  bool success;

  _GameHall_sitDown_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GameHall_sitDown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_sitDown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_sitDown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_sitDown_presult__isset {
  _GameHall_sitDown_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_sitDown_presult__isset;

class GameHall_sitDown_presult {
 public:


  virtual ~GameHall_sitDown_presult() throw();
  bool* success;

  _GameHall_sitDown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_getSeatInfo_args__isset {
  _GameHall_getSeatInfo_args__isset() : deskID(false), seatID(false) {}
  bool deskID :1;
  bool seatID :1;
} _GameHall_getSeatInfo_args__isset;

class GameHall_getSeatInfo_args {
 public:

  GameHall_getSeatInfo_args(const GameHall_getSeatInfo_args&);
  GameHall_getSeatInfo_args& operator=(const GameHall_getSeatInfo_args&);
  GameHall_getSeatInfo_args() : deskID(0), seatID(0) {
  }

  virtual ~GameHall_getSeatInfo_args() throw();
  int32_t deskID;
  int32_t seatID;

  _GameHall_getSeatInfo_args__isset __isset;

  void __set_deskID(const int32_t val);

  void __set_seatID(const int32_t val);

  bool operator == (const GameHall_getSeatInfo_args & rhs) const
  {
    if (!(deskID == rhs.deskID))
      return false;
    if (!(seatID == rhs.seatID))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSeatInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSeatInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_getSeatInfo_pargs {
 public:


  virtual ~GameHall_getSeatInfo_pargs() throw();
  const int32_t* deskID;
  const int32_t* seatID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSeatInfo_result__isset {
  _GameHall_getSeatInfo_result__isset() : success(false) {}
  bool success :1;
} _GameHall_getSeatInfo_result__isset;

class GameHall_getSeatInfo_result {
 public:

  GameHall_getSeatInfo_result(const GameHall_getSeatInfo_result&);
  GameHall_getSeatInfo_result& operator=(const GameHall_getSeatInfo_result&);
  GameHall_getSeatInfo_result() {
  }

  virtual ~GameHall_getSeatInfo_result() throw();
  PlayerInfo success;

  _GameHall_getSeatInfo_result__isset __isset;

  void __set_success(const PlayerInfo& val);

  bool operator == (const GameHall_getSeatInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSeatInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSeatInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSeatInfo_presult__isset {
  _GameHall_getSeatInfo_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_getSeatInfo_presult__isset;

class GameHall_getSeatInfo_presult {
 public:


  virtual ~GameHall_getSeatInfo_presult() throw();
  PlayerInfo* success;

  _GameHall_getSeatInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_setReady_args__isset {
  _GameHall_setReady_args__isset() : account(false), deskID(false), seatID(false), isReady(false) {}
  bool account :1;
  bool deskID :1;
  bool seatID :1;
  bool isReady :1;
} _GameHall_setReady_args__isset;

class GameHall_setReady_args {
 public:

  GameHall_setReady_args(const GameHall_setReady_args&);
  GameHall_setReady_args& operator=(const GameHall_setReady_args&);
  GameHall_setReady_args() : account(), deskID(0), seatID(0), isReady(0) {
  }

  virtual ~GameHall_setReady_args() throw();
  std::string account;
  int32_t deskID;
  int32_t seatID;
  bool isReady;

  _GameHall_setReady_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_deskID(const int32_t val);

  void __set_seatID(const int32_t val);

  void __set_isReady(const bool val);

  bool operator == (const GameHall_setReady_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(deskID == rhs.deskID))
      return false;
    if (!(seatID == rhs.seatID))
      return false;
    if (!(isReady == rhs.isReady))
      return false;
    return true;
  }
  bool operator != (const GameHall_setReady_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_setReady_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_setReady_pargs {
 public:


  virtual ~GameHall_setReady_pargs() throw();
  const std::string* account;
  const int32_t* deskID;
  const int32_t* seatID;
  const bool* isReady;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_setReady_result {
 public:

  GameHall_setReady_result(const GameHall_setReady_result&);
  GameHall_setReady_result& operator=(const GameHall_setReady_result&);
  GameHall_setReady_result() {
  }

  virtual ~GameHall_setReady_result() throw();

  bool operator == (const GameHall_setReady_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameHall_setReady_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_setReady_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_setReady_presult {
 public:


  virtual ~GameHall_setReady_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_leaveSeat_args__isset {
  _GameHall_leaveSeat_args__isset() : account(false), deskID(false), seatID(false) {}
  bool account :1;
  bool deskID :1;
  bool seatID :1;
} _GameHall_leaveSeat_args__isset;

class GameHall_leaveSeat_args {
 public:

  GameHall_leaveSeat_args(const GameHall_leaveSeat_args&);
  GameHall_leaveSeat_args& operator=(const GameHall_leaveSeat_args&);
  GameHall_leaveSeat_args() : account(), deskID(0), seatID(0) {
  }

  virtual ~GameHall_leaveSeat_args() throw();
  std::string account;
  int32_t deskID;
  int32_t seatID;

  _GameHall_leaveSeat_args__isset __isset;

  void __set_account(const std::string& val);

  void __set_deskID(const int32_t val);

  void __set_seatID(const int32_t val);

  bool operator == (const GameHall_leaveSeat_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(deskID == rhs.deskID))
      return false;
    if (!(seatID == rhs.seatID))
      return false;
    return true;
  }
  bool operator != (const GameHall_leaveSeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_leaveSeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_leaveSeat_pargs {
 public:


  virtual ~GameHall_leaveSeat_pargs() throw();
  const std::string* account;
  const int32_t* deskID;
  const int32_t* seatID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_leaveSeat_result__isset {
  _GameHall_leaveSeat_result__isset() : success(false) {}
  bool success :1;
} _GameHall_leaveSeat_result__isset;

class GameHall_leaveSeat_result {
 public:

  GameHall_leaveSeat_result(const GameHall_leaveSeat_result&);
  GameHall_leaveSeat_result& operator=(const GameHall_leaveSeat_result&);
  GameHall_leaveSeat_result() : success(0) {
  }

  virtual ~GameHall_leaveSeat_result() throw();
  int32_t success;

  _GameHall_leaveSeat_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const GameHall_leaveSeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_leaveSeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_leaveSeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_leaveSeat_presult__isset {
  _GameHall_leaveSeat_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_leaveSeat_presult__isset;

class GameHall_leaveSeat_presult {
 public:


  virtual ~GameHall_leaveSeat_presult() throw();
  int32_t* success;

  _GameHall_leaveSeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_autoMatch_args__isset {
  _GameHall_autoMatch_args__isset() : account(false) {}
  bool account :1;
} _GameHall_autoMatch_args__isset;

class GameHall_autoMatch_args {
 public:

  GameHall_autoMatch_args(const GameHall_autoMatch_args&);
  GameHall_autoMatch_args& operator=(const GameHall_autoMatch_args&);
  GameHall_autoMatch_args() : account() {
  }

  virtual ~GameHall_autoMatch_args() throw();
  std::string account;

  _GameHall_autoMatch_args__isset __isset;

  void __set_account(const std::string& val);

  bool operator == (const GameHall_autoMatch_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const GameHall_autoMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_autoMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_autoMatch_pargs {
 public:


  virtual ~GameHall_autoMatch_pargs() throw();
  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_autoMatch_result__isset {
  _GameHall_autoMatch_result__isset() : success(false) {}
  bool success :1;
} _GameHall_autoMatch_result__isset;

class GameHall_autoMatch_result {
 public:

  GameHall_autoMatch_result(const GameHall_autoMatch_result&);
  GameHall_autoMatch_result& operator=(const GameHall_autoMatch_result&);
  GameHall_autoMatch_result() {
  }

  virtual ~GameHall_autoMatch_result() throw();
  std::map<std::string, int32_t>  success;

  _GameHall_autoMatch_result__isset __isset;

  void __set_success(const std::map<std::string, int32_t> & val);

  bool operator == (const GameHall_autoMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_autoMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_autoMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_autoMatch_presult__isset {
  _GameHall_autoMatch_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_autoMatch_presult__isset;

class GameHall_autoMatch_presult {
 public:


  virtual ~GameHall_autoMatch_presult() throw();
  std::map<std::string, int32_t> * success;

  _GameHall_autoMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameHall_getDeskList_args {
 public:

  GameHall_getDeskList_args(const GameHall_getDeskList_args&);
  GameHall_getDeskList_args& operator=(const GameHall_getDeskList_args&);
  GameHall_getDeskList_args() {
  }

  virtual ~GameHall_getDeskList_args() throw();

  bool operator == (const GameHall_getDeskList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameHall_getDeskList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getDeskList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_getDeskList_pargs {
 public:


  virtual ~GameHall_getDeskList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getDeskList_result__isset {
  _GameHall_getDeskList_result__isset() : success(false) {}
  bool success :1;
} _GameHall_getDeskList_result__isset;

class GameHall_getDeskList_result {
 public:

  GameHall_getDeskList_result(const GameHall_getDeskList_result&);
  GameHall_getDeskList_result& operator=(const GameHall_getDeskList_result&);
  GameHall_getDeskList_result() {
  }

  virtual ~GameHall_getDeskList_result() throw();
  std::vector<Desk>  success;

  _GameHall_getDeskList_result__isset __isset;

  void __set_success(const std::vector<Desk> & val);

  bool operator == (const GameHall_getDeskList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_getDeskList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getDeskList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getDeskList_presult__isset {
  _GameHall_getDeskList_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_getDeskList_presult__isset;

class GameHall_getDeskList_presult {
 public:


  virtual ~GameHall_getDeskList_presult() throw();
  std::vector<Desk> * success;

  _GameHall_getDeskList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_getSavedGame_args__isset {
  _GameHall_getSavedGame_args__isset() : id(false) {}
  bool id :1;
} _GameHall_getSavedGame_args__isset;

class GameHall_getSavedGame_args {
 public:

  GameHall_getSavedGame_args(const GameHall_getSavedGame_args&);
  GameHall_getSavedGame_args& operator=(const GameHall_getSavedGame_args&);
  GameHall_getSavedGame_args() : id(0) {
  }

  virtual ~GameHall_getSavedGame_args() throw();
  int32_t id;

  _GameHall_getSavedGame_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const GameHall_getSavedGame_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSavedGame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSavedGame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_getSavedGame_pargs {
 public:


  virtual ~GameHall_getSavedGame_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSavedGame_result__isset {
  _GameHall_getSavedGame_result__isset() : success(false) {}
  bool success :1;
} _GameHall_getSavedGame_result__isset;

class GameHall_getSavedGame_result {
 public:

  GameHall_getSavedGame_result(const GameHall_getSavedGame_result&);
  GameHall_getSavedGame_result& operator=(const GameHall_getSavedGame_result&);
  GameHall_getSavedGame_result() : success() {
  }

  virtual ~GameHall_getSavedGame_result() throw();
  std::string success;

  _GameHall_getSavedGame_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GameHall_getSavedGame_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSavedGame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSavedGame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSavedGame_presult__isset {
  _GameHall_getSavedGame_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_getSavedGame_presult__isset;

class GameHall_getSavedGame_presult {
 public:


  virtual ~GameHall_getSavedGame_presult() throw();
  std::string* success;

  _GameHall_getSavedGame_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_getSavedGameList_args__isset {
  _GameHall_getSavedGameList_args__isset() : account(false) {}
  bool account :1;
} _GameHall_getSavedGameList_args__isset;

class GameHall_getSavedGameList_args {
 public:

  GameHall_getSavedGameList_args(const GameHall_getSavedGameList_args&);
  GameHall_getSavedGameList_args& operator=(const GameHall_getSavedGameList_args&);
  GameHall_getSavedGameList_args() : account() {
  }

  virtual ~GameHall_getSavedGameList_args() throw();
  std::string account;

  _GameHall_getSavedGameList_args__isset __isset;

  void __set_account(const std::string& val);

  bool operator == (const GameHall_getSavedGameList_args & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSavedGameList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSavedGameList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_getSavedGameList_pargs {
 public:


  virtual ~GameHall_getSavedGameList_pargs() throw();
  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSavedGameList_result__isset {
  _GameHall_getSavedGameList_result__isset() : success(false) {}
  bool success :1;
} _GameHall_getSavedGameList_result__isset;

class GameHall_getSavedGameList_result {
 public:

  GameHall_getSavedGameList_result(const GameHall_getSavedGameList_result&);
  GameHall_getSavedGameList_result& operator=(const GameHall_getSavedGameList_result&);
  GameHall_getSavedGameList_result() {
  }

  virtual ~GameHall_getSavedGameList_result() throw();
  std::vector<std::string>  success;

  _GameHall_getSavedGameList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const GameHall_getSavedGameList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameHall_getSavedGameList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_getSavedGameList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameHall_getSavedGameList_presult__isset {
  _GameHall_getSavedGameList_presult__isset() : success(false) {}
  bool success :1;
} _GameHall_getSavedGameList_presult__isset;

class GameHall_getSavedGameList_presult {
 public:


  virtual ~GameHall_getSavedGameList_presult() throw();
  std::vector<std::string> * success;

  _GameHall_getSavedGameList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GameHall_delSavedGame_args__isset {
  _GameHall_delSavedGame_args__isset() : id(false) {}
  bool id :1;
} _GameHall_delSavedGame_args__isset;

class GameHall_delSavedGame_args {
 public:

  GameHall_delSavedGame_args(const GameHall_delSavedGame_args&);
  GameHall_delSavedGame_args& operator=(const GameHall_delSavedGame_args&);
  GameHall_delSavedGame_args() : id(0) {
  }

  virtual ~GameHall_delSavedGame_args() throw();
  int32_t id;

  _GameHall_delSavedGame_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const GameHall_delSavedGame_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const GameHall_delSavedGame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_delSavedGame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_delSavedGame_pargs {
 public:


  virtual ~GameHall_delSavedGame_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_delSavedGame_result {
 public:

  GameHall_delSavedGame_result(const GameHall_delSavedGame_result&);
  GameHall_delSavedGame_result& operator=(const GameHall_delSavedGame_result&);
  GameHall_delSavedGame_result() {
  }

  virtual ~GameHall_delSavedGame_result() throw();

  bool operator == (const GameHall_delSavedGame_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameHall_delSavedGame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameHall_delSavedGame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameHall_delSavedGame_presult {
 public:


  virtual ~GameHall_delSavedGame_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameHallClient : virtual public GameHallIf {
 public:
  GameHallClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameHallClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool sitDown(const std::string& account, const int32_t deskID, const int32_t seat);
  void send_sitDown(const std::string& account, const int32_t deskID, const int32_t seat);
  bool recv_sitDown();
  void getSeatInfo(PlayerInfo& _return, const int32_t deskID, const int32_t seatID);
  void send_getSeatInfo(const int32_t deskID, const int32_t seatID);
  void recv_getSeatInfo(PlayerInfo& _return);
  void setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady);
  void send_setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady);
  void recv_setReady();
  int32_t leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID);
  void send_leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID);
  int32_t recv_leaveSeat();
  void autoMatch(std::map<std::string, int32_t> & _return, const std::string& account);
  void send_autoMatch(const std::string& account);
  void recv_autoMatch(std::map<std::string, int32_t> & _return);
  void getDeskList(std::vector<Desk> & _return);
  void send_getDeskList();
  void recv_getDeskList(std::vector<Desk> & _return);
  void getSavedGame(std::string& _return, const int32_t id);
  void send_getSavedGame(const int32_t id);
  void recv_getSavedGame(std::string& _return);
  void getSavedGameList(std::vector<std::string> & _return, const std::string& account);
  void send_getSavedGameList(const std::string& account);
  void recv_getSavedGameList(std::vector<std::string> & _return);
  void delSavedGame(const int32_t id);
  void send_delSavedGame(const int32_t id);
  void recv_delSavedGame();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameHallProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<GameHallIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameHallProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sitDown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSeatInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setReady(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leaveSeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_autoMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeskList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSavedGame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSavedGameList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delSavedGame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameHallProcessor(::apache::thrift::stdcxx::shared_ptr<GameHallIf> iface) :
    iface_(iface) {
    processMap_["sitDown"] = &GameHallProcessor::process_sitDown;
    processMap_["getSeatInfo"] = &GameHallProcessor::process_getSeatInfo;
    processMap_["setReady"] = &GameHallProcessor::process_setReady;
    processMap_["leaveSeat"] = &GameHallProcessor::process_leaveSeat;
    processMap_["autoMatch"] = &GameHallProcessor::process_autoMatch;
    processMap_["getDeskList"] = &GameHallProcessor::process_getDeskList;
    processMap_["getSavedGame"] = &GameHallProcessor::process_getSavedGame;
    processMap_["getSavedGameList"] = &GameHallProcessor::process_getSavedGameList;
    processMap_["delSavedGame"] = &GameHallProcessor::process_delSavedGame;
  }

  virtual ~GameHallProcessor() {}
};

class GameHallProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameHallProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< GameHallIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< GameHallIfFactory > handlerFactory_;
};

class GameHallMultiface : virtual public GameHallIf {
 public:
  GameHallMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<GameHallIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameHallMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<GameHallIf> > ifaces_;
  GameHallMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<GameHallIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool sitDown(const std::string& account, const int32_t deskID, const int32_t seat) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sitDown(account, deskID, seat);
    }
    return ifaces_[i]->sitDown(account, deskID, seat);
  }

  void getSeatInfo(PlayerInfo& _return, const int32_t deskID, const int32_t seatID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSeatInfo(_return, deskID, seatID);
    }
    ifaces_[i]->getSeatInfo(_return, deskID, seatID);
    return;
  }

  void setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setReady(account, deskID, seatID, isReady);
    }
    ifaces_[i]->setReady(account, deskID, seatID, isReady);
  }

  int32_t leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leaveSeat(account, deskID, seatID);
    }
    return ifaces_[i]->leaveSeat(account, deskID, seatID);
  }

  void autoMatch(std::map<std::string, int32_t> & _return, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->autoMatch(_return, account);
    }
    ifaces_[i]->autoMatch(_return, account);
    return;
  }

  void getDeskList(std::vector<Desk> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeskList(_return);
    }
    ifaces_[i]->getDeskList(_return);
    return;
  }

  void getSavedGame(std::string& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSavedGame(_return, id);
    }
    ifaces_[i]->getSavedGame(_return, id);
    return;
  }

  void getSavedGameList(std::vector<std::string> & _return, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSavedGameList(_return, account);
    }
    ifaces_[i]->getSavedGameList(_return, account);
    return;
  }

  void delSavedGame(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delSavedGame(id);
    }
    ifaces_[i]->delSavedGame(id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GameHallConcurrentClient : virtual public GameHallIf {
 public:
  GameHallConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameHallConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool sitDown(const std::string& account, const int32_t deskID, const int32_t seat);
  int32_t send_sitDown(const std::string& account, const int32_t deskID, const int32_t seat);
  bool recv_sitDown(const int32_t seqid);
  void getSeatInfo(PlayerInfo& _return, const int32_t deskID, const int32_t seatID);
  int32_t send_getSeatInfo(const int32_t deskID, const int32_t seatID);
  void recv_getSeatInfo(PlayerInfo& _return, const int32_t seqid);
  void setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady);
  int32_t send_setReady(const std::string& account, const int32_t deskID, const int32_t seatID, const bool isReady);
  void recv_setReady(const int32_t seqid);
  int32_t leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID);
  int32_t send_leaveSeat(const std::string& account, const int32_t deskID, const int32_t seatID);
  int32_t recv_leaveSeat(const int32_t seqid);
  void autoMatch(std::map<std::string, int32_t> & _return, const std::string& account);
  int32_t send_autoMatch(const std::string& account);
  void recv_autoMatch(std::map<std::string, int32_t> & _return, const int32_t seqid);
  void getDeskList(std::vector<Desk> & _return);
  int32_t send_getDeskList();
  void recv_getDeskList(std::vector<Desk> & _return, const int32_t seqid);
  void getSavedGame(std::string& _return, const int32_t id);
  int32_t send_getSavedGame(const int32_t id);
  void recv_getSavedGame(std::string& _return, const int32_t seqid);
  void getSavedGameList(std::vector<std::string> & _return, const std::string& account);
  int32_t send_getSavedGameList(const std::string& account);
  void recv_getSavedGameList(std::vector<std::string> & _return, const int32_t seqid);
  void delSavedGame(const int32_t id);
  int32_t send_delSavedGame(const int32_t id);
  void recv_delSavedGame(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
