/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef zgobandServerThrift_TYPES_H
#define zgobandServerThrift_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace zgobandRPC {

class PlayerInfo;

class Desk;

class InvalidOperation;

typedef struct _PlayerInfo__isset {
  _PlayerInfo__isset() : account(false), nickname(false), core(false), winRound(false), loseRound(false), drawRound(false), escapeRound(false), isReady(false) {}
  bool account :1;
  bool nickname :1;
  bool core :1;
  bool winRound :1;
  bool loseRound :1;
  bool drawRound :1;
  bool escapeRound :1;
  bool isReady :1;
} _PlayerInfo__isset;

class PlayerInfo : public virtual ::apache::thrift::TBase {
 public:

  PlayerInfo(const PlayerInfo&);
  PlayerInfo& operator=(const PlayerInfo&);
  PlayerInfo() : account(), nickname(), core(0), winRound(0), loseRound(0), drawRound(0), escapeRound(0), isReady(0) {
  }

  virtual ~PlayerInfo() throw();
  std::string account;
  std::string nickname;
  int32_t core;
  int32_t winRound;
  int32_t loseRound;
  int32_t drawRound;
  int32_t escapeRound;
  bool isReady;

  _PlayerInfo__isset __isset;

  void __set_account(const std::string& val);

  void __set_nickname(const std::string& val);

  void __set_core(const int32_t val);

  void __set_winRound(const int32_t val);

  void __set_loseRound(const int32_t val);

  void __set_drawRound(const int32_t val);

  void __set_escapeRound(const int32_t val);

  void __set_isReady(const bool val);

  bool operator == (const PlayerInfo & rhs) const
  {
    if (!(account == rhs.account))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(core == rhs.core))
      return false;
    if (!(winRound == rhs.winRound))
      return false;
    if (!(loseRound == rhs.loseRound))
      return false;
    if (!(drawRound == rhs.drawRound))
      return false;
    if (!(escapeRound == rhs.escapeRound))
      return false;
    if (__isset.isReady != rhs.__isset.isReady)
      return false;
    else if (__isset.isReady && !(isReady == rhs.isReady))
      return false;
    return true;
  }
  bool operator != (const PlayerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerInfo &a, PlayerInfo &b);

std::ostream& operator<<(std::ostream& out, const PlayerInfo& obj);

typedef struct _Desk__isset {
  _Desk__isset() : deskID(false), player1(false), player2(false), ready1(false), ready2(false) {}
  bool deskID :1;
  bool player1 :1;
  bool player2 :1;
  bool ready1 :1;
  bool ready2 :1;
} _Desk__isset;

class Desk : public virtual ::apache::thrift::TBase {
 public:

  Desk(const Desk&);
  Desk& operator=(const Desk&);
  Desk() : deskID(0), player1(), player2(), ready1(0), ready2(0) {
  }

  virtual ~Desk() throw();
  int32_t deskID;
  std::string player1;
  std::string player2;
  bool ready1;
  bool ready2;

  _Desk__isset __isset;

  void __set_deskID(const int32_t val);

  void __set_player1(const std::string& val);

  void __set_player2(const std::string& val);

  void __set_ready1(const bool val);

  void __set_ready2(const bool val);

  bool operator == (const Desk & rhs) const
  {
    if (!(deskID == rhs.deskID))
      return false;
    if (!(player1 == rhs.player1))
      return false;
    if (!(player2 == rhs.player2))
      return false;
    if (!(ready1 == rhs.ready1))
      return false;
    if (!(ready2 == rhs.ready2))
      return false;
    return true;
  }
  bool operator != (const Desk &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Desk & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Desk &a, Desk &b);

std::ostream& operator<<(std::ostream& out, const Desk& obj);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : type(false), why(false) {}
  bool type :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : type(), why() {
  }

  virtual ~InvalidOperation() throw();
  std::string type;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_type(const std::string& val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);

} // namespace

#endif
